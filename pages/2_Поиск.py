import streamlit as st
import pandas as pd
import numpy as np
import streamlit_folium as sf
import folium
from typing import Iterable

from DB_work import *


# pipreqs
table_name = 'test_table'
DB_object = DB_ORM()


st.set_page_config(page_title='ТЕСТ',page_icon=":bar_chart",layout="wide")

hide_streamlit_style = """
            <style>
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


# print(pd.DataFrame([55.7522, 37.6156], columns = ['lat', 'ln']))

START_COORDINATES = (52.2978, 104.296)
transport_types = ['Автобус', 'Трамвай', 'Троллейбус']
route_numbers = {}

for tr_type in transport_types:
    route_numbers.update({tr_type : [i[0] for i in DB_object.execute(f'''
        SELECT Route FROM {table_name} 
            WHERE Type = "{tr_type}"
    ''', is_change= False)]})


st.session_state.update({ 'route_type' : transport_types }) if 'route_type' not in st.session_state else ''

# route_number = st.sidebar.number_input('Номер маршрута', min_value = 0, max_value = 9999, value = 0 if 'route_number' not in st.session_state else st.session_state.route_number)
route_type = st.sidebar.selectbox('Тип транспорта', transport_types if 'route_type' not in st.session_state else st.session_state.route_type)

# route_number = st.sidebar.selectbox('Номер маршрута', options = DB_object.get_unique(table_name = table_name, column_name = 'Route') if 'route_number' not in st.session_state else st.session_state.route_number)
route_number = st.sidebar.selectbox('Номер маршрута', options = route_numbers[route_type])


def state_updater(var_name : str, value : Iterable) -> bool:
    copy = st.session_state[var_name]                                 # не copy, чтобы работало с итерируемыми объектами
    copy.remove(value)
    copy.insert(0, value)
    st.session_state.update({ var_name : copy})
    

if st.sidebar.button('Поиск', key = 'search_button_1'):
    if st.session_state.route_type.index(route_type) != 0:
        state_updater('route_type', route_type)


    way_got = DB_object.get_route(route_num = route_number, route_type_ = route_type, table_name = table_name)
    
    # sf.folium_static(m)

    if way_got:
        way_got = [[[52.22368618108874, 104.29130958078457], [52.22582541842698, 104.29232832965454], [52.22576311334356, 104.29186241514043], [52.225801643770524, 104.29011086038497], [52.2256873815401, 104.28993511107393], [52.22517441428806, 104.2897408791373], [52.22393291892348, 104.28955996774573], [52.22245313918293, 104.28962603907001], [52.222160172146744, 104.28952637284226], [52.22086061882638, 104.2886363393294], [52.22028716769162, 104.28808646200116], [52.2193210393753, 104.28655776126715]], [[52.21855727791058, 104.29032484879048], [52.220213167067726, 104.29020639572275], [52.22117475943324, 104.29038171365971], [52.22365004335069, 104.29128552412067]], [[52.21628544801396, 104.29278835782486], [52.21631324484673, 104.2920637971771], [52.21647376815909, 104.29148316631137], [52.21674938649602, 104.29105288629387], [52.21705648417753, 104.29080207068165], [52.21774925464322, 104.29047508666537], [52.2185129743074, 104.29034535993884]], [[52.21628045849084, 104.29573383243883], [52.21628585789526, 104.2928217193508]], [[52.21664390108177, 104.30254667694862], [52.21617601633258, 104.30201132027423], [52.215955222877824, 104.30160659961177], [52.21576660698332, 104.30073093172416], [52.2157690031201, 104.30009785506815], [52.21587053208572, 104.29937669012634], [52.21618919058139, 104.29803203268693], [52.2162794775104, 104.2957621919249]], [[52.22107659465766, 104.30539275648067], [52.22028685721804, 104.30506360330611], [52.21879891344801, 104.3042044037478], [52.21665689779118, 104.30255971094016]], [[52.22492700035585, 104.30524428274515], [52.22406941161569, 104.30526922725522], [52.22153309569035, 104.30549090197331], [52.221108687899545, 104.30540495417296]], [[52.22733412867734, 104.30286857511265], [52.22665897541506, 104.30374839403396], [52.226007594215616, 104.30469077230413], [52.22553831003725, 104.30515037374096], [52.225010494301415, 104.30525117465652]], [[52.23157339748607, 104.30506285145833], [52.23061322735549, 104.30722489019098], [52.22825685434415, 104.30264171874137], [52.22795929271189, 104.30242636584694], [52.22773733932209, 104.30252862023826], [52.227358400171084, 104.30284701976484]], [[52.23350929699481, 104.3006150408404], [52.2315883918981, 104.30503147684885]], [[52.2346755303887, 104.2872931512411], [52.234921273493114, 104.28847200853431], [52.23534813123405, 104.29146056070687], [52.2354543787433, 104.29289834345695], [52.23535183649665, 104.29586381764142], [52.23521001925391, 104.29660603683953], [52.2340911680007, 104.2993003261015], [52.23352564957733, 104.30058890068739]], [[52.23726330849206, 104.28033771634995], [52.234873894757214, 104.28419940739946], [52.23428066392475, 104.28541446906496], [52.23466995360775, 104.2872648203425]], [[52.24291805884724, 104.2721075627116], [52.24249123456815, 104.27245259055604], [52.24191418812421, 104.2731399971949], [52.241066210594965, 104.27437986532937], [52.24018249235678, 104.27578939908784], [52.23900827685915, 104.27761069662586], [52.23727907620085, 104.2803157774668]], [[52.2467626777337, 104.26964764882598], [52.245791811159705, 104.27036802355025], [52.2436946255977, 104.27151440859063], [52.24293942098524, 104.27208848601384]], [[52.249266041772046, 104.26653512691246], [52.24834400533703, 104.26795098329109], [52.24775128121084, 104.26866308229808], [52.24678684672554, 104.26962489560248]], [[52.25741303595379, 104.26288462532096], [52.25564845022518, 104.26323282972919], [52.25216260905236, 104.2635850700591], [52.251314730475286, 104.26394915175553], [52.2506434828523, 104.26456413449142], [52.250146098876826, 104.26511409676021], [52.24927678799631, 104.26651848913173]], [[52.263086413288704, 104.26007815731441], [52.25747575039347, 104.26289138476238]], [[52.269008606602, 104.25707136109321], [52.26885435234021, 104.25694496813219], [52.26865875326473, 104.25697183515268], [52.26573720517899, 104.25853650732171], [52.26311015494878, 104.26006791314421]], [[52.27500071354629, 104.25588819337685], [52.26947317092811, 104.25879040603138], [52.269380692642244, 104.25865869324912], [52.26903176905185, 104.25710630426755]], [[52.28006888101061, 104.25321358639223], [52.27695852336214, 104.25489389942959], [52.27502901615546, 104.25587332974732]], [[52.286004533190805, 104.25013404948436], [52.28185656145706, 104.25227948573138], [52.28010741148515, 104.25319505317196]], [[52.28741526823805, 104.25400560720902], [52.2868147236905, 104.24973450037561], [52.28603083447413, 104.25012051745608]], [[52.28810849419338, 104.2740103291456], [52.28803487349583, 104.27388466214529], [52.28804934080239, 104.273696832984], [52.28766507420994, 104.27308384565953], [52.28670808730715, 104.27151205279216], [52.28672176032828, 104.27070675897193], [52.28684416139538, 104.26948821515225], [52.287402144977904, 104.26467099354386], [52.28791961046278, 104.26038062137638], [52.28796895098199, 104.25818375239857], [52.28798734146804, 104.25753057433104], [52.28775341217087, 104.25610373639444], [52.287419564173916, 104.2540365924898]], [[52.28919654982215, 104.27842734547448], [52.28874522613424, 104.275438347038], [52.28851254382667, 104.27453635372297], [52.288307984482145, 104.27414068012376], [52.288211992352984, 104.27417988408786], [52.28812295345131, 104.27403413497063]], [[52.28331444424066, 104.28086293626313], [52.28488232080315, 104.28068874664848], [52.28596511943263, 104.28060074422649], [52.28688025117202, 104.28014451036472], [52.28737945069892, 104.27985987220308], [52.2888268857796, 104.27945647825112], [52.28930329173414, 104.27925181657127], [52.28919966368804, 104.27846524537495]], [[52.2781427318794, 104.28512884567357], [52.27794962741348, 104.28457427919415], [52.2779901120758, 104.2843069674841], [52.27867014682769, 104.28370746761567], [52.28040490098911, 104.28221667306349], [52.28199517287152, 104.28102056137021], [52.28330530347938, 104.28086476683751]], [[52.28133324476141, 104.29173667095614], [52.280957519316786, 104.29116399588003], [52.280560165133465, 104.29049283836162], [52.279957384464694, 104.289386897329], [52.278814232871326, 104.286751693881], [52.27815026700384, 104.28514992108347]]]
        # st.write(way_got)

        # Создайте карту
        map = folium.Map(location=START_COORDINATES, zoom_start=12)
        for counter in range(len(way_got)):
            # print(line)
            line = way_got[counter]

            if counter == 0:
                folium.PolyLine(line).add_to(map)
                # folium.Marker(line[0]).add_to(map)
                folium.Marker(line[-1]).add_to(map)
            
            elif counter == len(way_got) -1:            # Возможно, неверно
                folium.PolyLine(line).add_to(map)
                folium.Marker(line[0]).add_to(map)
                folium.Marker(line[-1]).add_to(map)

            else:
                folium.PolyLine(line).add_to(map)
                folium.Marker(line[-1]).add_to(map)

            

            


        # with open('K:\Downloads\Загрузки Яндекс\map.geojson', 'r') as temp:
        #     loaded = json.loads(temp.read())['features']

        # loaded = loaded[::-1]

        # for line in loaded:
        #     line = [points[::-1] for points in line['geometry']['coordinates']]

        #     folium.PolyLine(line).add_to(map)
        #     folium.Marker(line[0]).add_to(map)
        #     folium.Marker(line[-1]).add_to(map)



        # folium.PolyLine([point[::-1] for point in way_got['coordinates']]).add_to(map)

        # print(way_got['coordinates'])

        # # Нарисуйте точки на карте
        # for coord in coordinates:
        #     folium.Marker(coord).add_to(map)

        # Выведите карту на экран
        map = sf.folium_static(map)

        DB_object.connection_close()
    
    else:
        st.write("Выбранный маршрут не найден")

